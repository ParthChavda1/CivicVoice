generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [postgis]
}

model admins {
  admin_id   BigInt      @id @default(autoincrement())
  user_id    BigInt      @unique
  role       admins_role
  created_at DateTime?   @default(now()) @db.Timestamp(6)
  updated_at DateTime?   @default(now()) @db.Timestamp(6)
  users      users       @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_admin_user_id")
}

model authority {
  authority_id BigInt          @id @default(autoincrement())
  user_id      BigInt          @unique
  zone         authority_zone
  department   department_type
  created_at   DateTime?       @default(now()) @db.Timestamp(6)
  updated_at   DateTime?       @default(now()) @db.Timestamp(6)
  users        users           @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_authority_user_id")
  complaint    complaint[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model citizen {
  citizen_id        BigInt                  @id @default(autoincrement())
  user_id           BigInt                  @unique
  adhar_number      String                  @unique @db.Char(12)
  phone_number      String                  @unique @db.Char(10)
  house_number      String                  @db.VarChar(10)
  street            String                  @db.VarChar(50)
  landmark          String?                 @db.VarChar(50)
  city              String                  @db.VarChar(50)
  state             String                  @db.VarChar(50)
  pincode           String                  @db.Char(6)
  location          Unsupported("geometry")
  created_at        DateTime?               @default(now()) @db.Timestamp(6)
  updated_at        DateTime?               @default(now()) @db.Timestamp(6)
  users             users                   @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_citizen_user_id")
  complaint         complaint[]
  upvoted_complaint upvoted_complaint[]
}

model complaint {
  complaint_id      BigInt                  @id @default(autoincrement())
  citizen_id        BigInt
  title             String                  @db.VarChar(255)
  description       String
  status            complaint_status        @default(Pending)
  category          complaint_category?
  media_url         String?
  location          Unsupported("geometry")
  authority_id      BigInt?
  created_at        DateTime?               @default(now()) @db.Timestamp(6)
  updated_at        DateTime?               @default(now()) @db.Timestamp(6)
  authority         authority?              @relation(fields: [authority_id], references: [authority_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_complaint_authority_id")
  citizen           citizen                 @relation(fields: [citizen_id], references: [citizen_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_complaint_citizen_id")
  complaint_media   complaint_media[]
  upvoted_complaint upvoted_complaint[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model complaint_media {
  media_id     BigInt    @id @default(autoincrement())
  complaint_id BigInt
  media_url    String
  media_type   String?   @db.VarChar(10)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  complaint    complaint @relation(fields: [complaint_id], references: [complaint_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_media_complaint")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

model upvoted_complaint {
  upvote_id    BigInt    @id @default(autoincrement())
  complaint_id BigInt
  citizen_id   BigInt
  upvoted_at   DateTime? @default(now()) @db.Timestamp(6)
  citizen      citizen   @relation(fields: [citizen_id], references: [citizen_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_upvoted_complaint_citizen_id")
  complaint    complaint @relation(fields: [complaint_id], references: [complaint_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_upvoted_complaint_complaint_id")

  @@unique([complaint_id, citizen_id], map: "unique_upvote")
}

model users {
  user_id    BigInt     @id @default(autoincrement())
  fullname   String     @db.VarChar(50)
  username   String     @unique @db.VarChar(30)
  password   String
  email      String     @unique @db.VarChar(50)
  role       users_role
  created_at DateTime?  @default(now()) @db.Timestamp(6)
  updated_at DateTime?  @default(now()) @db.Timestamp(6)
  admins     admins?
  authority  authority?
  citizen    citizen?
}

enum admins_role {
  Superadmin
  Moderator
}

enum authority_zone {
  zone1
  zone2
  zone3
  zone4
}

enum complaint_category {
  Garbage_Collection          @map("Garbage Collection")
  Drainage_Issue              @map("Drainage Issue")
  Water_Supply_Disruption     @map("Water Supply Disruption")
  Water_Leakage               @map("Water Leakage")
  Electricity_Outage          @map("Electricity Outage")
  Street_Light_Issue          @map("Street Light Issue")
  Potholes___Road_Damage      @map("Potholes & Road Damage")
  Broken_Footpath             @map("Broken Footpath")
  Unauthorized_Construction   @map("Unauthorized Construction")
  Public_Health_Hazard        @map("Public Health Hazard")
  Incorrect_Property_Tax_Bill @map("Incorrect Property Tax Bill")
  Fire_Safety_Violation       @map("Fire Safety Violation")
  Pollution_Complaint         @map("Pollution Complaint")
  Deforestation_Issue         @map("Deforestation Issue")
  Traffic_Signal_Issue        @map("Traffic Signal Issue")
  Parking_Violation           @map("Parking Violation")
  Damaged_Public_Facilities   @map("Damaged Public Facilities")
  Illegal_Trade_Activity      @map("Illegal Trade Activity")
}

enum complaint_status {
  Pending
  In_Progress @map("In Progress")
  Resolved
  Rejected
  Escalated
  Closed
}

enum department_type {
  Sanitation_Department               @map("Sanitation Department")
  Water_Supply_Department             @map("Water Supply Department")
  Electricity_Department              @map("Electricity Department")
  Roads___Infrastructure_Department   @map("Roads & Infrastructure Department")
  Building___Town_Planning_Department @map("Building & Town Planning Department")
  Public_Health_Department            @map("Public Health Department")
  Revenue___Property_Tax_Department   @map("Revenue & Property Tax Department")
  Fire___Emergency_Services           @map("Fire & Emergency Services")
  Environmental_Department            @map("Environmental Department")
  Transport___Traffic_Department      @map("Transport & Traffic Department")
  Public_Works_Department             @map("Public Works Department")
  Licensing___Trade_Department        @map("Licensing & Trade Department")
}

enum users_role {
  Admin
  Authority
  Citizen
}
